@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics;
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>


<button @onclick="ReceiveServerMessages" disabled="@(!IsConnected)">ReceiveServerMessages</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    int messagesToSend = 10000;

    int prevIndex = -1;
    Stopwatch stopWatch = new Stopwatch();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:5001/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<int>("ReceiveServerMessage", (index) =>
        {
            if (prevIndex < 0)
            {
                messages.Add("Received first message");
                StateHasChanged();
            }

            if (index < prevIndex)
            {
                messages.Add("error");
                StateHasChanged();
            }

            prevIndex = index;

            if (index >= messagesToSend)
            {
                stopWatch.Stop();
                var ms = stopWatch.Elapsed.TotalSeconds;
                messages.Add($"Finished receiving {index} messages in {ms}sec");
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    async Task ReceiveServerMessages()
    {
        prevIndex = -1;
        stopWatch.Start();
        await hubConnection.SendAsync("StartSendingServerMessages", messagesToSend);
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}